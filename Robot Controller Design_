{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP2Uv1fSva8Xh7U3wHEUOTu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YlvXbe6s47Gl","executionInfo":{"status":"ok","timestamp":1745281788469,"user_tz":-330,"elapsed":55637,"user":{"displayName":"Niraj Khankari","userId":"11064675807337423302"}},"outputId":"78e7ff7a-7a0a-4923-92d0-9295d29f28b8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: control in /usr/local/lib/python3.11/dist-packages (0.10.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.14.1)\n","Requirement already satisfied: matplotlib>=3.6 in /usr/local/lib/python3.11/dist-packages (from control) (3.10.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.6->control) (1.17.0)\n","Iteration 1: Best Fitness = 17.97570031251001, Best K = 0.23283151378048625\n","Iteration 2: Best Fitness = 17.97570031251001, Best K = 0.23283151378048625\n","Iteration 3: Best Fitness = 17.90544297096416, Best K = 0.22651435216305188\n","Iteration 4: Best Fitness = 17.90544297096416, Best K = 0.22651435216305188\n","Iteration 5: Best Fitness = 17.753634796098986, Best K = 0.2141845249075862\n","Iteration 6: Best Fitness = 17.644779873096304, Best K = 0.20630148406304893\n","Iteration 7: Best Fitness = 17.469448750232033, Best K = 0.19440371100153686\n","Iteration 8: Best Fitness = 17.133238688656007, Best K = 0.176667035408489\n","Iteration 9: Best Fitness = 17.133238688656007, Best K = 0.176667035408489\n","Iteration 10: Best Fitness = 17.133238688656007, Best K = 0.176667035408489\n","Iteration 11: Best Fitness = 16.961147697822987, Best K = 0.16866194523566888\n","Iteration 12: Best Fitness = 16.794535985631587, Best K = 0.16211748975543663\n","Iteration 13: Best Fitness = 16.794535985631587, Best K = 0.16211748975543663\n","Iteration 14: Best Fitness = 16.794535985631587, Best K = 0.16211748975543663\n","Iteration 15: Best Fitness = 16.794535985631587, Best K = 0.16211748975543663\n","Iteration 16: Best Fitness = 16.794535985631587, Best K = 0.16211748975543663\n","Iteration 17: Best Fitness = 16.699266205571504, Best K = 0.1586660559556179\n","Iteration 18: Best Fitness = 16.699266205571504, Best K = 0.1586660559556179\n","Iteration 19: Best Fitness = 16.461365180212802, Best K = 0.15053647802281148\n","Iteration 20: Best Fitness = 16.461365180212802, Best K = 0.15053647802281148\n","Iteration 21: Best Fitness = 16.461365180212802, Best K = 0.15053647802281148\n","Iteration 22: Best Fitness = 1.084386685189653, Best K = 0.0593479955033116\n","Iteration 23: Best Fitness = 1.084386685189653, Best K = 0.0593479955033116\n","Iteration 24: Best Fitness = 1.084386685189653, Best K = 0.0593479955033116\n","Iteration 25: Best Fitness = 1.084386685189653, Best K = 0.0593479955033116\n","Iteration 26: Best Fitness = 1.084386685189653, Best K = 0.0593479955033116\n","Iteration 27: Best Fitness = 1.084386685189653, Best K = 0.0593479955033116\n","Iteration 28: Best Fitness = 1.084386685189653, Best K = 0.0593479955033116\n","Iteration 29: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 30: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 31: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 32: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 33: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 34: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 35: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 36: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 37: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 38: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 39: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 40: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 41: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 42: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 43: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 44: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 45: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 46: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 47: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 48: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 49: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 50: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 51: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 52: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 53: Best Fitness = 0.5072281963066916, Best K = 0.05989373978134129\n","Iteration 54: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 55: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 56: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 57: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 58: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 59: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 60: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 61: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 62: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 63: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 64: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 65: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 66: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 67: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 68: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 69: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 70: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 71: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 72: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 73: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 74: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 75: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 76: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 77: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 78: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 79: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 80: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 81: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 82: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 83: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 84: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 85: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 86: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 87: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 88: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 89: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 90: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 91: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 92: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 93: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 94: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 95: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 96: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 97: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 98: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 99: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Iteration 100: Best Fitness = 0.46941572368313106, Best K = 0.060079338822135835\n","Optimal proportional gain K: 0.060079338822135835\n","Optimal fitness (offset error + settling time): 0.46941572368313106\n"]}],"source":["# Install necessary libraries\n","!pip install control numpy scipy\n","\n","import numpy as np\n","import control as ctrl\n","import random\n","import math\n","import matplotlib.pyplot as plt\n","\n","# Parameters for the control system\n","process_gain = 5\n","process_pole = -2\n","feedback_gain = 0.1\n","setpoint = 20\n","input_amplitude = 4  # Step input amplitude\n","max_iterations = 100  # Maximum number of iterations for ABC algorithm\n","population_size = 30  # Number of bees\n","\n","# Control system transfer function\n","def transfer_function(K):\n","    num = [process_gain]\n","    den = [1, process_pole + 50 * K]\n","    system = ctrl.TransferFunction(num, den)\n","    return system\n","\n","# Fitness function to evaluate offset error and settling time\n","def calculate_fitness(K):\n","    # Closed-loop system\n","    system = transfer_function(K)\n","\n","    # Generate time and step response\n","    time = np.linspace(0, 100, 1000)\n","    time, response = ctrl.step_response(system, T=time)\n","\n","    # Scale the response to match the input amplitude\n","    response *= input_amplitude\n","\n","    # Find steady-state error (offset error)\n","    steady_state_value = response[-1]  # Last value\n","    offset_error = abs(setpoint - steady_state_value)\n","\n","    # Settling time (time when response settles within 2% of the final value)\n","    final_value = response[-1]\n","    tolerance = 0.02 * final_value\n","    settling_time = next((t for t, y in zip(time, response) if abs(y - final_value) <= tolerance), time[-1])\n","\n","    # Fitness function: minimize offset error and settling time\n","    # Return a combined fitness metric (lower is better)\n","    fitness = offset_error + settling_time / 10  # We normalize settling time for balance\n","    return fitness\n","\n","# Artificial Bee Colony (ABC) algorithm\n","def abc_algorithm():\n","    # Initialize population (K values) and their fitness values\n","    population = [random.uniform(0, 10) for _ in range(population_size)]  # K values in range [0, 10]\n","    fitness = [calculate_fitness(K) for K in population]\n","\n","    best_fitness = min(fitness)\n","    best_solution = population[fitness.index(best_fitness)]\n","\n","    # ABC algorithm loop\n","    for iteration in range(max_iterations):\n","        # Employee bees phase\n","        for i in range(population_size):\n","            new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","            new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","            new_fitness = calculate_fitness(new_solution)\n","            if new_fitness < fitness[i]:\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Onlooker bees phase\n","        total_fitness = sum(fitness)\n","        probabilities = [f / total_fitness for f in fitness]\n","\n","        for i in range(population_size):\n","            if random.random() < probabilities[i]:\n","                new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","                new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","                new_fitness = calculate_fitness(new_solution)\n","                if new_fitness < fitness[i]:\n","                    population[i] = new_solution\n","                    fitness[i] = new_fitness\n","\n","        # Scout bees phase\n","        for i in range(population_size):\n","            if random.random() < 0.05:  # 5% chance for scout bee\n","                new_solution = random.uniform(0, 10)\n","                new_fitness = calculate_fitness(new_solution)\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Update the best solution found so far\n","        current_best_fitness = min(fitness)\n","        if current_best_fitness < best_fitness:\n","            best_fitness = current_best_fitness\n","            best_solution = population[fitness.index(best_fitness)]\n","\n","        # Display progress\n","        print(f\"Iteration {iteration + 1}: Best Fitness = {best_fitness}, Best K = {best_solution}\")\n","\n","    return best_solution, best_fitness\n","\n","# Run the ABC algorithm\n","best_K, best_fitness = abc_algorithm()\n","\n","print(f\"Optimal proportional gain K: {best_K}\")\n","print(f\"Optimal fitness (offset error + settling time): {best_fitness}\")\n"]},{"cell_type":"code","source":["# Install necessary libraries\n","!pip install control numpy scipy\n","\n","import numpy as np\n","import control as ctrl\n","import random\n","import math\n","import matplotlib.pyplot as plt\n","\n","# Parameters for the control system\n","process_gain = 5\n","process_pole = -2\n","feedback_gain = 0.1\n","setpoint = 20\n","input_amplitude = 4  # Step input amplitude\n","max_iterations = 100  # Maximum number of iterations for ABC algorithm\n","population_size = 30  # Number of bees\n","\n","# Control system transfer function\n","def transfer_function(K):\n","    num = [process_gain]\n","    den = [1, process_pole + 50 * K]\n","    system = ctrl.TransferFunction(num, den)\n","    return system\n","\n","# Fitness function to evaluate offset error and settling time\n","def calculate_fitness(K):\n","    # Closed-loop system\n","    system = transfer_function(K)\n","\n","    # Generate time and step response\n","    time = np.linspace(0, 100, 1000)\n","    time, response = ctrl.step_response(system, T=time)\n","\n","    # Scale the response to match the input amplitude\n","    response *= input_amplitude\n","\n","    # Find steady-state error (offset error)\n","    steady_state_value = response[-1]  # Last value\n","    offset_error = abs(setpoint - steady_state_value)\n","\n","    # Settling time (time when response settles within 2% of the final value)\n","    final_value = response[-1]\n","    tolerance = 0.02 * final_value\n","    settling_time = next((t for t, y in zip(time, response) if abs(y - final_value) <= tolerance), time[-1])\n","\n","    # Fitness function: minimize offset error and settling time\n","    # Return a combined fitness metric (lower is better)\n","    fitness = offset_error + settling_time / 10  # We normalize settling time for balance\n","    return fitness\n","\n","# Artificial Bee Colony (ABC) algorithm\n","def abc_algorithm():\n","    # Initialize population (K values) and their fitness values\n","    population = [random.uniform(0, 10) for _ in range(population_size)]  # K values in range [0, 10]\n","    fitness = [calculate_fitness(K) for K in population]\n","\n","    best_fitness = min(fitness)\n","    best_solution = population[fitness.index(best_fitness)]\n","\n","    # ABC algorithm loop\n","    for iteration in range(max_iterations):\n","        # Employee bees phase\n","        for i in range(population_size):\n","            new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","            new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","            new_fitness = calculate_fitness(new_solution)\n","            if new_fitness < fitness[i]:\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Onlooker bees phase\n","        total_fitness = sum(fitness)\n","        probabilities = [f / total_fitness for f in fitness]\n","\n","        for i in range(population_size):\n","            if random.random() < probabilities[i]:\n","                new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","                new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","                new_fitness = calculate_fitness(new_solution)\n","                if new_fitness < fitness[i]:\n","                    population[i] = new_solution\n","                    fitness[i] = new_fitness\n","\n","        # Scout bees phase\n","        for i in range(population_size):\n","            if random.random() < 0.05:  # 5% chance for scout bee\n","                new_solution = random.uniform(0, 10)\n","                new_fitness = calculate_fitness(new_solution)\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Update the best solution found so far\n","        current_best_fitness = min(fitness)\n","        if current_best_fitness < best_fitness:\n","            best_fitness = current_best_fitness\n","            best_solution = population[fitness.index(best_fitness)]\n","\n","        # Display progress\n","        print(f\"Iteration {iteration + 1}: Best Fitness = {best_fitness}, Best K = {best_solution}\")\n","\n","    return best_solution, best_fitness\n","\n","# Run the ABC algorithm\n","best_K, best_fitness = abc_algorithm()\n","\n","print(f\"Optimal proportional gain K: {best_K}\")\n","print(f\"Optimal fitness (offset error + settling time): {best_fitness}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZwS4W_Dh6gEM","executionInfo":{"status":"ok","timestamp":1745282069703,"user_tz":-330,"elapsed":58673,"user":{"displayName":"Niraj Khankari","userId":"11064675807337423302"}},"outputId":"4b3e9b21-87cf-4f8c-9f0f-a9e1a1696e7e"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: control in /usr/local/lib/python3.11/dist-packages (0.10.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.14.1)\n","Requirement already satisfied: matplotlib>=3.6 in /usr/local/lib/python3.11/dist-packages (from control) (3.10.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.6->control) (1.17.0)\n","Iteration 1: Best Fitness = 19.187162849847876, Best K = 0.5202744267871562\n","Iteration 2: Best Fitness = 19.187162849847876, Best K = 0.5202744267871562\n","Iteration 3: Best Fitness = 19.187162849847876, Best K = 0.5202744267871562\n","Iteration 4: Best Fitness = 15.443733825352044, Best K = 0.12590389509717914\n","Iteration 5: Best Fitness = 14.726154579960143, Best K = 0.11429481869974847\n","Iteration 6: Best Fitness = 14.726154579960143, Best K = 0.11429481869974847\n","Iteration 7: Best Fitness = 14.568662760644042, Best K = 0.1121833078570242\n","Iteration 8: Best Fitness = 13.688360414844217, Best K = 0.10209473757666705\n","Iteration 9: Best Fitness = 13.688360414844217, Best K = 0.10209473757666705\n","Iteration 10: Best Fitness = 12.716637175485985, Best K = 0.0938103587581444\n","Iteration 11: Best Fitness = 12.716637175485985, Best K = 0.0938103587581444\n","Iteration 12: Best Fitness = 12.716637175485985, Best K = 0.0938103587581444\n","Iteration 13: Best Fitness = 12.716637175485985, Best K = 0.0938103587581444\n","Iteration 14: Best Fitness = 11.565358287404372, Best K = 0.08648561821568028\n","Iteration 15: Best Fitness = 11.565358287404372, Best K = 0.08648561821568028\n","Iteration 16: Best Fitness = 11.111411369136558, Best K = 0.0841074205699118\n","Iteration 17: Best Fitness = 11.111411369136558, Best K = 0.0841074205699118\n","Iteration 18: Best Fitness = 10.391772924251248, Best K = 0.08078125766205477\n","Iteration 19: Best Fitness = 10.391772924251248, Best K = 0.08078125766205477\n","Iteration 20: Best Fitness = 9.99560438398188, Best K = 0.07919802481194539\n","Iteration 21: Best Fitness = 9.973055186047716, Best K = 0.07911159951740918\n","Iteration 22: Best Fitness = 9.355268501281692, Best K = 0.07681562609272954\n","Iteration 23: Best Fitness = 6.735645822937602, Best K = 0.06955383073660606\n","Iteration 24: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 25: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 26: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 27: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 28: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 29: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 30: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 31: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 32: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 33: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 34: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 35: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 36: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 37: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 38: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 39: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 40: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 41: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 42: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 43: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 44: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 45: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 46: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 47: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 48: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 49: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 50: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 51: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 52: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 53: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 54: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 55: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 56: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 57: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 58: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 59: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 60: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 61: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 62: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 63: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 64: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 65: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 66: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 67: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 68: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 69: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 70: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 71: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 72: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 73: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 74: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 75: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 76: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 77: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 78: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 79: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 80: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 81: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 82: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 83: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 84: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 85: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 86: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 87: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 88: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 89: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 90: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 91: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 92: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 93: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 94: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 95: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 96: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 97: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 98: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 99: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Iteration 100: Best Fitness = 6.1479902960898904, Best K = 0.06830397624500166\n","Optimal proportional gain K: 0.06830397624500166\n","Optimal fitness (offset error + settling time): 6.1479902960898904\n"]}]},{"cell_type":"code","source":["# Install necessary libraries\n","!pip install control numpy scipy\n","\n","import numpy as np\n","import control as ctrl\n","import random\n","import math\n","import matplotlib.pyplot as plt\n","\n","# Parameters for the control system\n","process_gain = 5\n","process_pole = -2\n","feedback_gain = 0.1\n","setpoint = 20\n","input_amplitude = 4  # Step input amplitude\n","max_iterations = 100  # Maximum number of iterations for ABC algorithm\n","population_size = 30  # Number of bees\n","\n","# Control system transfer function\n","def transfer_function(K):\n","    num = [process_gain]\n","    den = [1, process_pole + 50 * K]\n","    system = ctrl.TransferFunction(num, den)\n","    return system\n","\n","# Fitness function to evaluate offset error and settling time\n","def calculate_fitness(K):\n","    # Closed-loop system\n","    system = transfer_function(K)\n","\n","    # Generate time and step response\n","    time = np.linspace(0, 100, 1000)\n","    time, response = ctrl.step_response(system, T=time)\n","\n","    # Scale the response to match the input amplitude\n","    response *= input_amplitude\n","\n","    # Find steady-state error (offset error)\n","    steady_state_value = response[-1]  # Last value\n","    offset_error = abs(setpoint - steady_state_value)\n","\n","    # Settling time (time when response settles within 2% of the final value)\n","    final_value = response[-1]\n","    tolerance = 0.02 * final_value\n","    settling_time = next((t for t, y in zip(time, response) if abs(y - final_value) <= tolerance), time[-1])\n","\n","    # Fitness function: minimize offset error and settling time\n","    # Return a combined fitness metric (lower is better)\n","    fitness = offset_error + settling_time / 10  # We normalize settling time for balance\n","    return fitness\n","\n","# Artificial Bee Colony (ABC) algorithm\n","def abc_algorithm():\n","    # Initialize population (K values) and their fitness values\n","    population = [random.uniform(0, 10) for _ in range(population_size)]  # K values in range [0, 10]\n","    fitness = [calculate_fitness(K) for K in population]\n","\n","    best_fitness = min(fitness)\n","    best_solution = population[fitness.index(best_fitness)]\n","\n","    # ABC algorithm loop\n","    for iteration in range(max_iterations):\n","        # Employee bees phase\n","        for i in range(population_size):\n","            new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","            new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","            new_fitness = calculate_fitness(new_solution)\n","            if new_fitness < fitness[i]:\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Onlooker bees phase\n","        total_fitness = sum(fitness)\n","        probabilities = [f / total_fitness for f in fitness]\n","\n","        for i in range(population_size):\n","            if random.random() < probabilities[i]:\n","                new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","                new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","                new_fitness = calculate_fitness(new_solution)\n","                if new_fitness < fitness[i]:\n","                    population[i] = new_solution\n","                    fitness[i] = new_fitness\n","\n","        # Scout bees phase\n","        for i in range(population_size):\n","            if random.random() < 0.05:  # 5% chance for scout bee\n","                new_solution = random.uniform(0, 10)\n","                new_fitness = calculate_fitness(new_solution)\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Update the best solution found so far\n","        current_best_fitness = min(fitness)\n","        if current_best_fitness < best_fitness:\n","            best_fitness = current_best_fitness\n","            best_solution = population[fitness.index(best_fitness)]\n","\n","        # Display progress\n","        print(f\"Iteration {iteration + 1}: Best Fitness = {best_fitness}, Best K = {best_solution}\")\n","\n","    return best_solution, best_fitness\n","\n","# Run the ABC algorithm\n","best_K, best_fitness = abc_algorithm()\n","\n","print(f\"Optimal proportional gain K: {best_K}\")\n","print(f\"Optimal fitness (offset error + settling time): {best_fitness}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WTQa4CPc6g42","executionInfo":{"status":"ok","timestamp":1745282152327,"user_tz":-330,"elapsed":56908,"user":{"displayName":"Niraj Khankari","userId":"11064675807337423302"}},"outputId":"8dbbb4a4-0005-496d-aeb6-02d6acc3cb95"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: control in /usr/local/lib/python3.11/dist-packages (0.10.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.14.1)\n","Requirement already satisfied: matplotlib>=3.6 in /usr/local/lib/python3.11/dist-packages (from control) (3.10.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.6->control) (1.17.0)\n","Iteration 1: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 2: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 3: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 4: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 5: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 6: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 7: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 8: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 9: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 10: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 11: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 12: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 13: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 14: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 15: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 16: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 17: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 18: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 19: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 20: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 21: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 22: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 23: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 24: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 25: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 26: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 27: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 28: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 29: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 30: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 31: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 32: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 33: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 34: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 35: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 36: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 37: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 38: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 39: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 40: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 41: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 42: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 43: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 44: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 45: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 46: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 47: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 48: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 49: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 50: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 51: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 52: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 53: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 54: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 55: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 56: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 57: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 58: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 59: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 60: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 61: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 62: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 63: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 64: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 65: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 66: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 67: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 68: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 69: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 70: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 71: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 72: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 73: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 74: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 75: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 76: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 77: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 78: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 79: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 80: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 81: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 82: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 83: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 84: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 85: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 86: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 87: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 88: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 89: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 90: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 91: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 92: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 93: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 94: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 95: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 96: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 97: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 98: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 99: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Iteration 100: Best Fitness = 16.641155458979323, Best K = 0.15665499009692718\n","Optimal proportional gain K: 0.15665499009692718\n","Optimal fitness (offset error + settling time): 16.641155458979323\n"]}]},{"cell_type":"code","source":["# Install necessary libraries\n","!pip install control numpy scipy\n","\n","import numpy as np\n","import control as ctrl\n","import random\n","import math\n","import matplotlib.pyplot as plt\n","\n","# Parameters for the control system\n","process_gain = 5\n","process_pole = -2\n","feedback_gain = 0.1\n","setpoint = 20\n","input_amplitude = 4  # Step input amplitude\n","max_iterations = 100  # Maximum number of iterations for ABC algorithm\n","population_size = 30  # Number of bees\n","\n","# Control system transfer function\n","def transfer_function(K):\n","    num = [process_gain]\n","    den = [1, process_pole + 50 * K]\n","    system = ctrl.TransferFunction(num, den)\n","    return system\n","\n","# Fitness function to evaluate offset error and settling time\n","def calculate_fitness(K):\n","    # Closed-loop system\n","    system = transfer_function(K)\n","\n","    # Generate time and step response\n","    time = np.linspace(0, 100, 1000)\n","    time, response = ctrl.step_response(system, T=time)\n","\n","    # Scale the response to match the input amplitude\n","    response *= input_amplitude\n","\n","    # Find steady-state error (offset error)\n","    steady_state_value = response[-1]  # Last value\n","    offset_error = abs(setpoint - steady_state_value)\n","\n","    # Settling time (time when response settles within 2% of the final value)\n","    final_value = response[-1]\n","    tolerance = 0.02 * final_value\n","    settling_time = next((t for t, y in zip(time, response) if abs(y - final_value) <= tolerance), time[-1])\n","\n","    # Fitness function: minimize offset error and settling time\n","    # Return a combined fitness metric (lower is better)\n","    fitness = offset_error + settling_time / 10  # We normalize settling time for balance\n","    return fitness\n","\n","# Artificial Bee Colony (ABC) algorithm\n","def abc_algorithm():\n","    # Initialize population (K values) and their fitness values\n","    population = [random.uniform(0, 10) for _ in range(population_size)]  # K values in range [0, 10]\n","    fitness = [calculate_fitness(K) for K in population]\n","\n","    best_fitness = min(fitness)\n","    best_solution = population[fitness.index(best_fitness)]\n","\n","    # ABC algorithm loop\n","    for iteration in range(max_iterations):\n","        # Employee bees phase\n","        for i in range(population_size):\n","            new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","            new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","            new_fitness = calculate_fitness(new_solution)\n","            if new_fitness < fitness[i]:\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Onlooker bees phase\n","        total_fitness = sum(fitness)\n","        probabilities = [f / total_fitness for f in fitness]\n","\n","        for i in range(population_size):\n","            if random.random() < probabilities[i]:\n","                new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","                new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","                new_fitness = calculate_fitness(new_solution)\n","                if new_fitness < fitness[i]:\n","                    population[i] = new_solution\n","                    fitness[i] = new_fitness\n","\n","        # Scout bees phase\n","        for i in range(population_size):\n","            if random.random() < 0.05:  # 5% chance for scout bee\n","                new_solution = random.uniform(0, 10)\n","                new_fitness = calculate_fitness(new_solution)\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Update the best solution found so far\n","        current_best_fitness = min(fitness)\n","        if current_best_fitness < best_fitness:\n","            best_fitness = current_best_fitness\n","            best_solution = population[fitness.index(best_fitness)]\n","\n","        # Display progress\n","        print(f\"Iteration {iteration + 1}: Best Fitness = {best_fitness}, Best K = {best_solution}\")\n","\n","    return best_solution, best_fitness\n","\n","# Run the ABC algorithm\n","best_K, best_fitness = abc_algorithm()\n","\n","print(f\"Optimal proportional gain K: {best_K}\")\n","print(f\"Optimal fitness (offset error + settling time): {best_fitness}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ISwQHizM8JR8","executionInfo":{"status":"ok","timestamp":1745282502271,"user_tz":-330,"elapsed":60032,"user":{"displayName":"Niraj Khankari","userId":"11064675807337423302"}},"outputId":"6e0697f0-7a03-462f-ac2f-b7fda5c25598"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: control in /usr/local/lib/python3.11/dist-packages (0.10.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.14.1)\n","Requirement already satisfied: matplotlib>=3.6 in /usr/local/lib/python3.11/dist-packages (from control) (3.10.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.6->control) (1.17.0)\n","Iteration 1: Best Fitness = 15.208938855584108, Best K = 0.12178017039378597\n","Iteration 2: Best Fitness = 14.740433557702985, Best K = 0.1144923825664485\n","Iteration 3: Best Fitness = 14.740433557702985, Best K = 0.1144923825664485\n","Iteration 4: Best Fitness = 13.862210012232959, Best K = 0.10381702262890294\n","Iteration 5: Best Fitness = 13.862210012232959, Best K = 0.10381702262890294\n","Iteration 6: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 7: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 8: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 9: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 10: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 11: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 12: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 13: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 14: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 15: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 16: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 17: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 18: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 19: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 20: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 21: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 22: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 23: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 24: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 25: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 26: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 27: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 28: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 29: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 30: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 31: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 32: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 33: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 34: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 35: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 36: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 37: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 38: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 39: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 40: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 41: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 42: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 43: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 44: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 45: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 46: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 47: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 48: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 49: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 50: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 51: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 52: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 53: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 54: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 55: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 56: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 57: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 58: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 59: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 60: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 61: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 62: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 63: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 64: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 65: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 66: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 67: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 68: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 69: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 70: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 71: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 72: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 73: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 74: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 75: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 76: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 77: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 78: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 79: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 80: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 81: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 82: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 83: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 84: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 85: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 86: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 87: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 88: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 89: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 90: Best Fitness = 13.464345407597179, Best K = 0.0999179597374515\n","Iteration 91: Best Fitness = 11.024890358265594, Best K = 0.0836905884773346\n","Iteration 92: Best Fitness = 9.39552989737126, Best K = 0.0769525582783345\n","Iteration 93: Best Fitness = 9.39552989737126, Best K = 0.0769525582783345\n","Iteration 94: Best Fitness = 8.895575136098623, Best K = 0.07529000191696131\n","Iteration 95: Best Fitness = 8.895575136098623, Best K = 0.07529000191696131\n","Iteration 96: Best Fitness = 8.895575136098623, Best K = 0.07529000191696131\n","Iteration 97: Best Fitness = 8.895575136098623, Best K = 0.07529000191696131\n","Iteration 98: Best Fitness = 6.134829732565624, Best K = 0.06827764295317013\n","Iteration 99: Best Fitness = 6.134829732565624, Best K = 0.06827764295317013\n","Iteration 100: Best Fitness = 1.981618602939072, Best K = 0.061764275557029416\n","Optimal proportional gain K: 0.061764275557029416\n","Optimal fitness (offset error + settling time): 1.981618602939072\n"]}]},{"cell_type":"code","source":["# Install necessary libraries\n","!pip install control numpy scipy\n","\n","import numpy as np\n","import control as ctrl\n","import random\n","import math\n","import matplotlib.pyplot as plt\n","\n","# Parameters for the control system\n","process_gain = 5\n","process_pole = -2\n","feedback_gain = 0.1\n","setpoint = 20\n","input_amplitude = 4  # Step input amplitude\n","max_iterations = 100  # Maximum number of iterations for ABC algorithm\n","population_size = 30  # Total number of bees (could be divided into Employee, Onlooker, and Scout)\n","\n","# Control system transfer function\n","def transfer_function(K):\n","    num = [process_gain]\n","    den = [1, process_pole + 50 * K]\n","    system = ctrl.TransferFunction(num, den)\n","    return system\n","\n","# Fitness function to evaluate offset error and settling time\n","def calculate_fitness(K):\n","    # Closed-loop system\n","    system = transfer_function(K)\n","\n","    # Generate time and step response\n","    time = np.linspace(0, 100, 1000)\n","    time, response = ctrl.step_response(system, T=time)\n","\n","    # Scale the response to match the input amplitude\n","    response *= input_amplitude\n","\n","    # Find steady-state error (offset error)\n","    steady_state_value = response[-1]  # Last value\n","    offset_error = abs(setpoint - steady_state_value)\n","\n","    # Settling time (time when response settles within 2% of the final value)\n","    final_value = response[-1]\n","    tolerance = 0.02 * final_value\n","    settling_time = next((t for t, y in zip(time, response) if abs(y - final_value) <= tolerance), time[-1])\n","\n","    # Fitness function: minimize offset error and settling time\n","    # Return a combined fitness metric (lower is better)\n","    fitness = offset_error + settling_time / 10  # We normalize settling time for balance\n","    return fitness\n","\n","# Artificial Bee Colony (ABC) algorithm with user-defined bee counts\n","def abc_algorithm(employee_bees_count, onlooker_bees_count, scout_bees_count):\n","    # Initialize population (K values) and their fitness values\n","    population = [random.uniform(0, 10) for _ in range(population_size)]  # K values in range [0, 10]\n","    fitness = [calculate_fitness(K) for K in population]\n","\n","    best_fitness = min(fitness)\n","    best_solution = population[fitness.index(best_fitness)]\n","\n","    # ABC algorithm loop\n","    for iteration in range(max_iterations):\n","        # Employee bees phase (explore and exploit)\n","        for i in range(employee_bees_count):\n","            new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","            new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","            new_fitness = calculate_fitness(new_solution)\n","            if new_fitness < fitness[i]:\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Onlooker bees phase (exploit the best solutions found so far)\n","        total_fitness = sum(fitness)\n","        probabilities = [f / total_fitness for f in fitness]\n","\n","        for i in range(onlooker_bees_count):\n","            if random.random() < probabilities[i]:\n","                new_solution = population[i] + random.uniform(-1, 1) * 0.1 * population[i]\n","                new_solution = max(0, min(new_solution, 10))  # Bound between 0 and 10\n","\n","                new_fitness = calculate_fitness(new_solution)\n","                if new_fitness < fitness[i]:\n","                    population[i] = new_solution\n","                    fitness[i] = new_fitness\n","\n","        # Scout bees phase (random exploration)\n","        for i in range(scout_bees_count):\n","            if random.random() < 0.05:  # 5% chance for scout bee\n","                new_solution = random.uniform(0, 10)\n","                new_fitness = calculate_fitness(new_solution)\n","                population[i] = new_solution\n","                fitness[i] = new_fitness\n","\n","        # Update the best solution found so far\n","        current_best_fitness = min(fitness)\n","        if current_best_fitness < best_fitness:\n","            best_fitness = current_best_fitness\n","            best_solution = population[fitness.index(best_fitness)]\n","\n","        # Display progress\n","        print(f\"Iteration {iteration + 1}: Best Fitness = {best_fitness}, Best K = {best_solution}\")\n","\n","    return best_solution, best_fitness\n","\n","# Accept user input for the number of employee, onlooker, and scout bees\n","employee_bees_count = int(input(\"Enter the number of Employee Bees: \"))\n","onlooker_bees_count = int(input(\"Enter the number of Onlooker Bees: \"))\n","scout_bees_count = int(input(\"Enter the number of Scout Bees: \"))\n","\n","# Run the ABC algorithm with the user-defined inputs\n","best_K, best_fitness = abc_algorithm(employee_bees_count, onlooker_bees_count, scout_bees_count)\n","\n","print(f\"Optimal proportional gain K: {best_K}\")\n","print(f\"Optimal fitness (offset error + settling time): {best_fitness}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wtoLnrbP8KKN","executionInfo":{"status":"ok","timestamp":1745283002252,"user_tz":-330,"elapsed":60788,"user":{"displayName":"Niraj Khankari","userId":"11064675807337423302"}},"outputId":"45e15c54-3f74-4caf-b01d-5fbbd0293411"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: control in /usr/local/lib/python3.11/dist-packages (0.10.1)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (1.14.1)\n","Requirement already satisfied: matplotlib>=3.6 in /usr/local/lib/python3.11/dist-packages (from control) (3.10.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (4.57.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (1.4.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=3.6->control) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib>=3.6->control) (1.17.0)\n","Enter the number of Employee Bees: 5\n","Enter the number of Onlooker Bees: 3\n","Enter the number of Scout Bees: 2\n","Iteration 1: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 2: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 3: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 4: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 5: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 6: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 7: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 8: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 9: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 10: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 11: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 12: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 13: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 14: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 15: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 16: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 17: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 18: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 19: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 20: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 21: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 22: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 23: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 24: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 25: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 26: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 27: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 28: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 29: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 30: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 31: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 32: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 33: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 34: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 35: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 36: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 37: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 38: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 39: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 40: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 41: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 42: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 43: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 44: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 45: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 46: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 47: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 48: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 49: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 50: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 51: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 52: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 53: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 54: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 55: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 56: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 57: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 58: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 59: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 60: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 61: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 62: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 63: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 64: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 65: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 66: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 67: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 68: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 69: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 70: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 71: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 72: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 73: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 74: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 75: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 76: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 77: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 78: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 79: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 80: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 81: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 82: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 83: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 84: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 85: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 86: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 87: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 88: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 89: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 90: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 91: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 92: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 93: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 94: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 95: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 96: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 97: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 98: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 99: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Iteration 100: Best Fitness = 11.246307798317567, Best K = 0.08477341771884639\n","Optimal proportional gain K: 0.08477341771884639\n","Optimal fitness (offset error + settling time): 11.246307798317567\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"3cKJQ_bC-ECl"},"execution_count":null,"outputs":[]}]}